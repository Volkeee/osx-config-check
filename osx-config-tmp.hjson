{
        description: "Current user is a non-admin account."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "id -Gn | grep -c -w admin"
                command_pass: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                '''
                1. For most of your work, you should be logged into a non-administrator account. If you've already set this up and you're just logged into your admin account in order to run this tool as prescribed, you can ignore this failed test.
                2. To create a new, non-admin user for most of your work: Open System Preferences.
                3. Select "Users & Groups".
                4. If necessary, click the lock icon in the lower left corner and provide your administrator credentials.
                5. Click the "+" to create a new user. Make sure the "Allow user to administer this computer" checkbox is un-checked for that user.
                6. You may also want to add your non-administrator user to a list of users who can use the "sudo" command within the Terminal application to briefly gain administrator-like credentials for special circumstances. See: http://osxdaily.com/2014/02/06/add-user-sudoers-file-mac/
                '''
        }
    },
    {
        //System Preferences->Security & Privacy->Firewall->Turn On Firewall
        //Note: This seems to get overwritten logging out/in. See following, user-specific version.
        description: "The OSX application firewall is enabled (system-wide)."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                //Exempt users who are using Little Snitch
                type: "exact match"
                command: little_snitch_is_installed
                command_pass: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/com.apple.alf globalstate"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write /Library/Preferences/com.apple.alf globalstate -bool true"
            sudo_command: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf globalstate -bool true"
        }
    },
    {
        description: "A password is required to wake the computer from sleep or screen saver (system-wide)."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read /Library/Preferences/com.apple.screensaver askForPassword"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            },
            {
                type: "exact match"
                command: "sudo defaults read /Library/Preferences/com.apple.screensaver askForPassword"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write /Library/Preferences/com.apple.screensaver askForPassword -bool true"
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.screensaver askForPassword -bool true"
        }
    },
    {
        //System Preferences->Security & Privacy->Firewall->Firewall Options...->Enable Stealth Mode
        //Note: This seems to get overwritten logging out/in. See following, user-specific version.
        description: "Stealth mode is enabled for OSX: Computer does not respond to ICMP ping requests or connection attempts from a closed TCP/UDP port. (system-wide)"
        confidence: "recommended"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/com.apple.alf stealthenabled"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true"
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true"
        }
        undo: "sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool false"
    },
    {
        description: "All application software is currently up to date."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/"
        tests:
        [
            {
                type: "exact match"
                command:
                    LASTUPDATE=$(defaults read /Library/Preferences/com.apple.SoftwareUpdate | grep LastSuccessfulDate | sed -e 's@^.* "\([0-9\\-]*\) .*$@\1@'); if [ "$LASTUPDATE" = "$(date +%Y-%m-%d)" ];then echo 1 && exit; fi; echo 0 && exit
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "softwareupdate -i -a"
            sudo_command: "sudo softwareupdate -i -a"
        }
    },
    {
        //System Preferences->Security & Privacy->General->Allow apps downloaded from
        description: "GateKeeper protection against untrusted applications is enabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "spctl --status | grep -i 'assessments enabled'"
                command_pass: "assessments enabled"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "spctl --master-enable"
            sudo_command: "sudo spctl --master-enable"
        }
        undo: "sudo spctl --master-disable"
    },
    {
        //System Preferences->Sharing->Remote Management
        description: "Remote Management is disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -n "$(ps -ef | egrep "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/MacOS/[A]RDAgent")" ]; then echo 1; exit; fi; echo 0; exit
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop"
            sudo_command: "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop"
        }
    },
    {
        description: "The File Vault key is protected when going to standby mode."
        //Once this set of configurations is proven stable, this can be upgraded from "experimental" to "recommended". We may want to warn the user first that waking will be slower and require authenticating twice.
        confidence: "experimental"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "bash ./scripts/DestroyFVKeyOnStandby_check.sh"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            //Additional configurations are required to make this setting not fight with powernap/standby/autopoweroff. See: https://github.com/drduh/OS-X-Security-and-Privacy-Guide/issues/124
            command: "pmset -a destroyfvkeyonstandby 1 ; pmset -a hibernatemode 25 ; pmset -a powernap 0 ; pmset -a standby 0 ; pmset -a standbydelay 0; pmset -a autopoweroff 0"
            sudo_command: "sudo pmset -a destroyfvkeyonstandby 1 ; sudo pmset -a hibernatemode 25 ; sudo pmset -a powernap 0 ; sudo pmset -a standby 0 ; sudo pmset -a standbydelay 0; sudo pmset -a autopoweroff 0"
        }
    },
    {
        description: "Google DNS servers are used by default on all network interfaces."
        confidence: "recommended"
        tests:
        [
            {
                type: "regex match"
                command: "networksetup listallnetworkservices | grep -v 'An asterisk' | xargs -I{} networksetup -getdnsservers '{}' "
                command_pass: "^(8\\.8\\.8\\.8\\n8\\.8\\.4\\.4\n*)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command: sudo bash ./scripts/use_google_dns.sh
        }
    },
    {
        description: "FileVault file system encryption is enabled."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "regex match"
                command: "fdesetup status -verbose"
                command_pass: "^.*FileVault is On.*$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            /*
             * I'm disabling the fixes below for now, because the decryption key
             * that the user should back up is printed to STDOUT. See:
             * https://derflounder.wordpress.com/2013/10/22/managing-mavericks-filevault-2-with-fdesetup/
             * https://github.com/SummitRoute/osxlockdown/blob/master/commands.yaml
             */
            //command: "fdesetup enable"
            //sudo_command: "sudo fdesetup enable"
            manual:
                '''
                1. Open System Preferences.
                2. Select "Security & Privacy"
                3. Select "FileVault".
                4. Click the "Turn On FileVault" button and follow the instructions.
                5. Decline to use iCloud or other Apple accounts for login. Instead, allow it to generate an offline decryption key. Store your decryption key somewhere safe so that you can decrypt your hard drive if something breaks, but prevent your enemies from acquiring yoru decryption key.
                '''
        }
        undo: ""
    },
    {
        //System Preferences->Desktop & Screen Saver->Start after
        description: "The idle timer for screen saver activation is set to 10 minutes or less."
        confidence: "recommended"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "regex match"
                //This is a clever way for polling settings for multiple users from the current logged in user :-)
                command:
                    UUID=`ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | sed -e 's/^.*"\(.*\)"$/\1/'`; for i in $(find /Users -type d -maxdepth 1); do PREF=$i/Library/Preferences/ByHost/com.apple.screensaver.$UUID; if [ -e $PREF.plist ]; then TIMEOUT=$(defaults read $PREF.plist idleTime) && if [ $TIMEOUT -eq 0 ] || [ $TIMEOUT -gt 600 ]; then echo 1; fi; else echo 0; fi; done;
                command_pass: "^(0\n*)+$" //all zeroes
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                UUID=`ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | sed -e 's/^.*"\(.*\)"$/\1/'`; for i in $(find /Users -type d -maxdepth 1); do PREF=$i/Library/Preferences/ByHost/com.apple.screensaver.$UUID; if [ -e $PREF.plist ]; then defaults -currentHost write $PREF.plist idleTime -int 600; fi; done
        }
    },
        /* ---BEGIN SAFARI BROWSER SETTINGS--- */

    {
        //Safari->Preferences->General->Open "safe" files after downloading
        description: "Files downloaded in Safari are not automatically opened."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads -bool false"
        }
    },
    {
        //Safari->Preferences->Security->Fraudulent sites->Warn when visiting a fraudulent website
        description: "The Safari web browser will warn when visiting known fraudulent websites."
        //I'm setting this to recommended for on the basis that there is like a privacy trade-off
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites -bool true"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites -bool false"
    },
    {
        //Safari->Preferences->Security->Web Content->Enable JavaScript
        description: "JavaScript is disabled in the Safari web browser."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled -bool true"
    },
    {
        //Safari->Preferences->Security->Web Content->Block pop-up windows
        description: "Pop-up windows are blocked in the Safari web browser."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool true"
    },
    {
        //Safari->Preferences->Advanced->Smart Search Field->Show full website address
        //This might help prevent phishing attacks
        description: "Full website addresses are displayed in the location bar of the Safari web browser."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField -bool true"
        }
        undo: defaults -currentHost write ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField -bool false"
    },
    {
        //Safari->Preferences->Privacy->Website tracking->Ask websites not to track me
        description: "The Safari web browser uses the Do-Not-Track HTTP header."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader -bool true"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader -bool false"
    },

    /* ----END SAFARI BROWSER SETTINGS---- */


   {
        description: "OpenSSL is up to date."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "openssl version"
                command_pass: "OpenSSL 1.0.2h  3 May 2016"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "brew update ; brew install openssl ; brew upgrade openssl ; bash ./scripts/set_openssl_latest_path.sh"
            manual:
                '''
                1. Bring the Terminal application to the foreground if it is not already. You should see the word "Terminal" in the top left corner of your screen.
                2. Select Terminal->Quit
                3. Re-open the Terminal application and run the tool again; this check should now pass.
                '''
        }
    },