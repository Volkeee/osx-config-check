/*
    Hjson is the Human JSON format.
    Learn about the specification at: http://hjson.org/
    This must be converted to JSON (e.g. using the `hjson_to_json.py` tool included).
*/

/* syntax:
[
    {
        `description` is a human-readable string describing the configuration being checked; it should be a present-tense statement about a positive security configuration. (REQUIRED FIELD)
        `confidence` indicates subjective estimation of negative side-effects. valid values: "required", "recommended", "experimental". (REQUIRED FIELD)
        `reference` provides a link to where a user can find more information about this configuration, or a citation of where this configuration was taken from. (OPTIONAL FIELD)
        `tests`: // is an ordered array of test objects. (REQUIRED FIELD, should not be empty)
        [
            {
                `type` is "exact match" or "regex match". (REQUIRED FIELD)
                `command` is the command you want to verify the output of (REQUIRED FIELD)
                `command_pass` is the value that `command`'s output should match. If it matches, all tests pass and subsequent tests for this config are not evaluated. (OPTIONAL FIELD)
                `command_fail` is the value that `command`'s output should NOT match. If it matches, all tests fail and subsequent tests for this config are not evaluated. (OPTIONAL FIELD)
                `case_sensitive` is "true" or "false" depending on whether the `command_pass` and/or `command_fail` values are case-sensitive. (REQUIRED FIELD)
            }
        ]
        `fix`: // is a JSON object that specifies how to remediate a broken configuration (REQUIRED FIELD, should not be empty)
        {
            `command` is the command that you use to attempt automatic remediation without sudo privileges. (OPTIONAL FIELD)
            `sudo_command` is the command using sudo privileges that attempts automatic remediation if `command` fails. (OPTIONAL FIELD)
            `manual` is the field that provides manual instructions to be printed to the user at the end of script execution if all automatic fixes fail. (OPTIONAL FIELD)
        }
    }
]
*/
/* NOTES:
    * back-slashes '\' must be escaped with a double black-slash, i.e. '\\'
*/
[
{
        description: "Current user is a non-admin account."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "id -Gn | grep -c -w admin"
                command_pass: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            manual:
                '''
                1. For most of your work, you should be logged into a non-administrator account. If you've already set this up and you're just logged into your admin account in order to run this tool as prescribed, you can ignore this failed test.
                2. To create a new, non-admin user for most of your work: Open System Preferences.
                3. Select "Users & Groups".
                4. If necessary, click the lock icon in the lower left corner and provide your administrator credentials.
                5. Click the "+" to create a new user. Make sure the "Allow user to administer this computer" checkbox is un-checked for that user.
                6. You may also want to add your non-administrator user to a list of users who can use the "sudo" command within the Terminal application to briefly gain administrator-like credentials for special circumstances. See: http://osxdaily.com/2014/02/06/add-user-sudoers-file-mac/
                '''
        }
    },
    {
        //System Preferences->Security & Privacy->Firewall->Turn On Firewall
        //Note: This seems to get overwritten logging out/in. See following, user-specific version.
        description: "The OSX application firewall is enabled (system-wide)."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                //Exempt users who are using Little Snitch
                type: "exact match"
                command: little_snitch_is_installed
                command_pass: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/com.apple.alf globalstate"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write /Library/Preferences/com.apple.alf globalstate -bool true"
            sudo_command: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf globalstate -bool true"
        }
    },
    {
        description: "A password is required to wake the computer from sleep or screen saver (system-wide)."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read /Library/Preferences/com.apple.screensaver askForPassword"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            },
            {
                type: "exact match"
                command: "sudo defaults read /Library/Preferences/com.apple.screensaver askForPassword"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write /Library/Preferences/com.apple.screensaver askForPassword -bool true"
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.screensaver askForPassword -bool true"
        }
    },
    {
        //System Preferences->Security & Privacy->Firewall->Firewall Options...->Enable Stealth Mode
        //Note: This seems to get overwritten logging out/in. See following, user-specific version.
        description: "Stealth mode is enabled for OSX: Computer does not respond to ICMP ping requests or connection attempts from a closed TCP/UDP port. (system-wide)"
        confidence: "recommended"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/com.apple.alf stealthenabled"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true"
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true"
        }
        undo: "sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool false"
    },
    {
        //System Preferences->Security & Privacy->Firewall->Firewall Options...->Automatically allow signed software to receive incoming connections
        description: "Automatic whitelisting of Apple-signed applications through the firewall is disabled (system-wide)."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/com.apple.alf allowsignedenabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool false"
            sudo_command: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool false"
        }
        undo: "sudo defaults -currentHost write /Library/Preferences/com.apple.alf allowsignedenabled -bool true"
    },
{
        description: "Captive portal for connecting to new networks is disabled to prevent MITM attacks."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read /Library/Preferences/SystemConfiguration/com.apple.captive.control Active"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.captive.control Active -bool false"
            sudo_command: "sudo defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.captive.control Active -bool false"
        }
        undo: "sudo defaults -currentHost write /Library/Preferences/SystemConfiguration/com.apple.captive.control Active -bool true"
    },
    {
        description: "OpenSSL is up to date."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "openssl version"
                command_pass: "OpenSSL 1.0.2h  3 May 2016"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "brew update ; brew install openssl ; brew upgrade openssl ; bash ./scripts/set_openssl_latest_path.sh"
            manual:
                '''
                1. Bring the Terminal application to the foreground if it is not already. You should see the word "Terminal" in the top left corner of your screen.
                2. Select Terminal->Quit
                3. Re-open the Terminal application and run the tool again; this check should now pass.
                '''
        }
    },
    {
        description: "All application software is currently up to date."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/"
        tests:
        [
            {
                type: "exact match"
                command:
                    LASTUPDATE=$(defaults read /Library/Preferences/com.apple.SoftwareUpdate | grep LastSuccessfulDate | sed -e 's@^.* "\([0-9\\-]*\) .*$@\1@'); if [ "$LASTUPDATE" = "$(date +%Y-%m-%d)" ];then echo 1 && exit; fi; echo 0 && exit
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "softwareupdate -i -a"
            sudo_command: "sudo softwareupdate -i -a"
        }
    },
    {
        //System Preferences: App Store: Automatically check for updates
        description: "Automatic check for software updates is enabled."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/"
        tests:
        [
            {
                type: "exact match"
                command: "sudo softwareupdate --schedule | grep -i 'Automatic check is on'"
                command_pass: "Automatic check is on"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "softwareupdate --schedule on"
            sudo_command: "sudo softwareupdate --schedule on"
        }
    },
    {
        //System Preferences->Security & Privacy->General->Allow apps downloaded from
        description: "GateKeeper protection against untrusted applications is enabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "spctl --status | grep -i 'assessments enabled'"
                command_pass: "assessments enabled"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "spctl --master-enable"
            sudo_command: "sudo spctl --master-enable"
        }
        undo: "sudo spctl --master-disable"
    },
    {
        //System Preferences->Bluetooth->Turn Bluetooth Off
        description: "Bluetooth is disabled."
        confidence: "experimental"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read /Library/Preferences/com.apple.Bluetooth ControllerPowerState"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            },
            {
                type: "exact match"
                command: "sudo defaults read /Library/Preferences/com.apple.Bluetooth ControllerPowerState"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool false; killall -HUP blued"
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool false; sudo killall -HUP blued"
        }
        undo: "defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool true; killall -HUP blued"
    },
    {
        description: "The infrared receiver is disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            },
            {
                type: "exact match"
                command: "sudo defaults read /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool false"
            sudo_command: "sudo defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool false"
        }
        undo: "defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool true"
    },
    {
        description: "AirDrop file sharing is disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read com.apple.NetworkBrowser DisableAirDrop"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            },
            {
                type: "exact match"
                command: "sudo defaults read com.apple.NetworkBrowser DisableAirDrop"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults_write_ignore_missing com.apple.NetworkBrowser DisableAirDrop -bool true"
        }
        undo: "defaults write com.apple.NetworkBrowser DisableAirDrop -bool false"
    },
    {
        //System Preferences->Sharing->File Sharing
        description: "File sharing is disabled."
        confidence: "recommended"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -n "$(launchctl list | egrep AppleFileServer)" ]; then exit 1; fi; if [ -n "$(grep -i array /Library/Preferences/SystemConfiguration/com.apple.smb.server.plist)" ]; then echo 1; exit; fi; echo 0; exit
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "launchctl unload -w /System/Library/LaunchDaemons/com.apple.AppleFileServer.plist; launchctl unload -w /System/Library/LaunchDaemons/com.apple.smbd.plist"
        }
    },
    {
        //System Preferences->Sharing->Printer Sharing
        description: "Printer sharing is disabled."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -n "$(system_profiler SPPrintersDataType | grep Shared | grep Yes)" ]; then echo 1; exit; fi; if [ -n "$(system_profiler SPPrintersDataType | grep 'System Printer Sharing: Yes')" ]; then echo 1; exit; fi; echo 0; exit
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "cupsctl --no-share-printers"
        }
    },
    {
        //System Preferences->Sharing->Remote Login
        description: "Remote login is disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "systemsetup -getremotelogin"
                command_pass: "Remote Login: Off"
                case_sensitive: "false"
            },
            {
                type: "exact match"
                command: "sudo systemsetup -getremotelogin"
                command_pass: "Remote Login: Off"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "systemsetup -f -setremotelogin off"
            sudo_command: "sudo systemsetup -f -setremotelogin off"
        }
        undo: "sudo systemsetup -f -setremotelogin on"
    },
    {
        //System Preferences->Sharing->Remote Management
        description: "Remote Management is disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -n "$(ps -ef | egrep "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/MacOS/[A]RDAgent")" ]; then echo 1; exit; fi; echo 0; exit
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop"
            sudo_command: "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop"
        }
    },
    {
        //System Preferences->Sharing->Internet Sharing
        description: "Internet Sharing is disabled on all network interfaces."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command: "defaults read /Library/Preferences/SystemConfiguration/com.apple.nat NAT | grep -c 'Enabled = 1'"
                command_pass: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults write /Library/Preferences/SystemConfiguration/com.apple.nat NAT -dict-add Enabled -bool false"
            sudo_command: "sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.nat NAT -dict-add Enabled -bool false"
        }
    },
    {
        //System Preferences->Energy Saver->Wake for network access
        description: "Wake on Network Access feature is disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "systemsetup getwakeonnetworkaccess"
                command_pass: "Wake On Network Access: Off"
                case_sensitive: "false"
            },
            {
                type: "exact match"
                command: "sudo systemsetup getwakeonnetworkaccess"
                command_pass: "Wake On Network Access: Off"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "systemsetup -setwakeonnetworkaccess off"
            sudo_command: "sudo systemsetup -setwakeonnetworkaccess off"
        }
        undo: "sudo systemsetup -setwakeonnetworkaccess on"
    },
    {
        //There are a number of attacks based on IPv6 use. For the sake of simplicity, it's best to disable it entirely unless it is required. See: https://www.ernw.de/download/ERNW_Hardening_IPv6_MacOS-X_v1_0.pdf
        description: "IPv6 is disabled on all network interfaces."
        confidence: "recommended"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command:
                    networksetup -listallnetworkservices | while read i; do SUPPORT=$(networksetup -getinfo "$i" | grep "IPv6: Automatic") && if [ -n "$SUPPORT" ]; then echo 1; fi; done; echo 0; exit
                command_pass: "0"
                //command_fail would be one or more instances of the character "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                networksetup -listallnetworkservices | while read i; do SUPPORT=$(networksetup -getinfo "$i" | grep "IPv6: Automatic") && if [ -n "$SUPPORT" ]; then networksetup -setv6off "$i"; fi; done;
        }
    },
    {
        description: "An administrator password is required to change system-wide preferences."
        confidence: "required"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -n "$(security authorizationdb read system.preferences 2> /dev/null | grep -A1 shared | grep -E '(true|false)' | grep 'false')" ]; then echo 0; else echo 1; fi
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            //TODO: Add warning to user before fix command is run that she will be prompted for her admin credentials. this requires a new field
            command:
                security authorizationdb read system.preferences > /tmp/system.preferences.plist &&/usr/libexec/PlistBuddy -c "Set :shared false" /tmp/system.preferences.plist && security authorizationdb write system.preferences < /tmp/system.preferences.plist
        }
    },

   {
        description: "The File Vault key is protected when going to standby mode."
        //Once this set of configurations is proven stable, this can be upgraded from "experimental" to "recommended". We may want to warn the user first that waking will be slower and require authenticating twice.
        confidence: "experimental"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "exact match"
                command: "bash ./scripts/DestroyFVKeyOnStandby_check.sh"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            //Additional configurations are required to make this setting not fight with powernap/standby/autopoweroff. See: https://github.com/drduh/OS-X-Security-and-Privacy-Guide/issues/124
            command: "pmset -a destroyfvkeyonstandby 1 ; pmset -a hibernatemode 25 ; pmset -a powernap 0 ; pmset -a standby 0 ; pmset -a standbydelay 0; pmset -a autopoweroff 0"
            sudo_command: "sudo pmset -a destroyfvkeyonstandby 1 ; sudo pmset -a hibernatemode 25 ; sudo pmset -a powernap 0 ; sudo pmset -a standby 0 ; sudo pmset -a standbydelay 0; sudo pmset -a autopoweroff 0"
        }
    },
    {
        description: "Secured DNS servers are used by default on all network interfaces."
        confidence: "recommended"
        tests:
        [
            {
                type: "regex match"
                command: "networksetup listallnetworkservices | grep -v 'An asterisk' | xargs -I{} networksetup -getdnsservers '{}' "
                command_pass: "^(8\\.8\\.8\\.8\\n8\\.8\\.4\\.4\n*)+$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            sudo_command: sudo bash ./scripts/use_google_dns.sh
        }
    },
    {
        description: "FileVault file system encryption is enabled."
        confidence: "required"
        reference: "https://github.com/drduh/OS-X-Security-and-Privacy-Guide"
        tests:
        [
            {
                type: "regex match"
                command: "fdesetup status -verbose"
                command_pass: "^.*FileVault is On.*$"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            /*
             * I'm disabling the fixes below for now, because the decryption key
             * that the user should back up is printed to STDOUT. See:
             * https://derflounder.wordpress.com/2013/10/22/managing-mavericks-filevault-2-with-fdesetup/
             * https://github.com/SummitRoute/osxlockdown/blob/master/commands.yaml
             */
            //command: "fdesetup enable"
            //sudo_command: "sudo fdesetup enable"
            manual:
                '''
                1. Open System Preferences.
                2. Select "Security & Privacy"
                3. Select "FileVault".
                4. Click the "Turn On FileVault" button and follow the instructions.
                5. Decline to use iCloud or other Apple accounts for login. Instead, allow it to generate an offline decryption key. Store your decryption key somewhere safe so that you can decrypt your hard drive if something breaks, but prevent your enemies from acquiring yoru decryption key.
                '''
        }
        undo: ""
    },
    {
        //System Preferences->Desktop & Screen Saver->Start after
        description: "The idle timer for screen saver activation is set to 10 minutes or less."
        confidence: "recommended"
        reference: "https://github.com/SummitRoute/osxlockdown/blob/58697f5162fe9e43df7dc9b6b94ffa34b0e11d4f/commands.yaml"
        tests:
        [
            {
                type: "regex match"
                //This is a clever way for polling settings for multiple users from the current logged in user :-)
                command:
                    UUID=`ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | sed -e 's/^.*"\(.*\)"$/\1/'`; for i in $(find /Users -type d -maxdepth 1); do PREF=$i/Library/Preferences/ByHost/com.apple.screensaver.$UUID; if [ -e $PREF.plist ]; then TIMEOUT=$(defaults read $PREF.plist idleTime) && if [ $TIMEOUT -eq 0 ] || [ $TIMEOUT -gt 600 ]; then echo 1; fi; else echo 0; fi; done;
                command_pass: "^(0\n*)+$" //all zeroes
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                UUID=`ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | sed -e 's/^.*"\(.*\)"$/\1/'`; for i in $(find /Users -type d -maxdepth 1); do PREF=$i/Library/Preferences/ByHost/com.apple.screensaver.$UUID; if [ -e $PREF.plist ]; then defaults -currentHost write $PREF.plist idleTime -int 600; fi; done
        }
    }
    {
        //Check if the Safari app is closed -- otherwise, it may override changes this app makes.
        description: "The Safari application is currently closed."
        confidence: "required"
        reference: "https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/defaults.1.html"
        tests:
        [
            {
                type: "exact match"
                command: "ps ax | grep -c '/Applications/Safari.app/Contents/MacOS/Safari'"
                command_pass: "2" //a value of "3" means it's running -- the other 2 are `/bin/sh` and the `grep` command.
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command:
                killall "Safari" ; sleep 1
        }
    },
    {
        //Safari->Preferences->AutoFill->Credit cards
        description: "Safari will not auto-fill credit card data."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillCreditCardData"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillCreditCardData -bool false"
        }
    },
    {
        //Safari->Preferences->AutoFill->Using info from my Contacts card
        description: "Safari will not auto-fill your contact data."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillFromAddressBook"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillFromAddressBook -bool false"
        }
    },
    {
        //Safari->Preferences->AutoFill->Other forms
        description: "Safari will not auto-fill miscellaneous forms."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillMiscellaneousForms"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillMiscellaneousForms -bool false"
        }
    },
    {
        //Safari->Preferences->AutoFill->User names and passwords
        description: "Safari will not auto-fill usernames or passwords."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoFillPasswords"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoFillPasswords -bool false"
        }
    },
    {
        //Safari->Preferences->General->Open "safe" files after downloading
        description: "Files downloaded in Safari are not automatically opened."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads -bool false"
        }
    },
    {
        //Safari->Develop->Disable Extensions
        //Note: Extensions are often a persistence mechanism for browser-based malware.
        description: "Safari extensions are disabled."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari ExtensionsEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari ExtensionsEnabled -bool false"
        }
    },
    {
        //Safari->Preferences->Security->Fraudulent sites->Warn when visiting a fraudulent website
        description: "The Safari web browser will warn when visiting known fraudulent websites."
        //I'm setting this to recommended for on the basis that there is like a privacy trade-off
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites -bool true"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites -bool false"
    },
    {
        //Safari->Preferences->Security->Web Content->Enable JavaScript
        description: "JavaScript is disabled in the Safari web browser."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled -bool true"
    },
    {
        //Safari->Preferences->Security->Web Content->Block pop-up windows
        description: "Pop-up windows are blocked in the Safari web browser."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool true"
    },
    {
        //Safari->Preferences->Security->Web Content->Block pop-up windows
        description: "Pop-up windows are blocked in the Safari web browser (Legacy version)."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically"
                command_pass: "0"
                command_fail: "1"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool true"
    },
    {
        //Safari->Preferences->Privacy->Website tracking->Ask websites not to track me
        description: "The Safari web browser uses the Do-Not-Track HTTP header."
        confidence: "recommended"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader -bool true"
        }
        undo: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader -bool false"
    },
    {
        //Safari->Preferences->Advanced->Smart Search Field->Show full website address
        //This might help prevent phishing attacks
        description: "Full website addresses are displayed in the location bar of the Safari web browser."
        confidence: "required"
        tests:
        [
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField"
                command_pass: "1"
                command_fail: "0"
                case_sensitive: "false"
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField -bool true"
        }
        undo: defaults -currentHost write ~/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField -bool false"
    },
    {
        //Check if the Mail app is closed -- otherwise, it may override changes this app makes.
        description: "The Mail application is currently closed."
        confidence: required
        reference: "https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/defaults.1.html"
        tests:
        [
            {
                type: "exact match"
                command: "ps ax | grep -c '/Applications/Mail.app/Contents/MacOS/Mail'"
                command_pass: 2 //a value of "3" means it's running -- the other 2 are `/bin/sh` and the `grep` command.
                case_sensitive: false
            }
        ]
        fix:
        {
            command:
                killall "Mail" ; sleep 1
        }
    },
    {
        //Mail->Preferences->Viewing->Load remote content in messages
        description: "Apple Mail does not automatically load remote content in e-mails."
        confidence: recommended
        tests:
        [
            {
                //If Apple Mail is not in use by the user, this test passes
                type: "exact match"
                command: apple_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults read ~/Library/Preferences/com.apple.mail-shared DisableURLLoading"
                command_pass: 1
                command_fail: 0
                case_sensitive: false
            }
        ]
        fix:
        {
            command: "defaults write ~/Library/Preferences/com.apple.mail-shared DisableURLLoading -bool true"
        }
        undo: "defaults write ~/Library/Preferences/com.apple.mail-shared DisableURLLoading -bool false"
    },
    {
        //Mail->Preferences->Junk Mail->Enable junk mail filtering AND When junk mail arrives: Move it to the Junk mailbox
        description: "Mail identified by Apple Mail as junk is sent to the Junk mailbox."
        confidence: recommended
        tests:
        [
            {
                //If Apple Mail is not in use by the user, this test passes
                type: "exact match"
                command: apple_mail_in_use
                command_pass: 0
                case_sensitive: false
            }
            {
                type: "exact match"
                command: "defaults -currentHost read ~/Library/Containers/com.apple.mail/Data/Library/Preferences/com.apple.mail JunkMailBehavior"
                command_pass: 2
                case_sensitive: false
            }
        ]
        fix:
        {
            command: "defaults -currentHost write ~/Library/Containers/com.apple.mail/Data/Library/Preferences/com.apple.mail JunkMailBehavior -int 2"
        }
    },
    {
        description: "Malware is not present."
        confidence: "required"
        reference: "http://www.welivesecurity.com/2016/08/30/osxkeydnap-spreads-via-signed-transmission-application/"
        tests:
        [
            {
                type: "exact match"
                command:
                    if [ -e "/Applications/Transmission.app/Contents/Resources/License.rtf" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "/Volumes/Transmission/Transmission.app/Contents/Resources/License.rtf" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "$HOME/Library/Application Support/com.apple.iCloud.sync.daemon/icloudsyncd" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "$HOME/Library/Application Support/com.apple.iCloud.sync.daemon/process.id" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "$HOME/Library/LaunchAgents/com.apple.iCloud.sync.daemon.plist" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "/Library/Application Support/com.apple.iCloud.sync.daemon/" ] ; then echo 1 ; else echo 0 ; fi
                command_fail: 1
                case_sensitive: false
            }
            {
                type: "exact match"
                command:
                    if [ -e "/Library/Application Support/com.apple.iCloud.sync.daemon/" ] ; then echo 1 ; else echo 0 ; fi
                command_pass: 0
                command_fail: 1
                case_sensitive: false
            }
        ]
        fix:
        {
            manual:
                '''
                1. One or more of the files associated with the OSX/Keydnap malware was found. Please report this to the authors of osx-config-check via GitHub (https://github.com/kristovatlas/osx-config-check) or Twitter (https://twitter.com/kristovatlas).
                2. Refer to this link: http://www.welivesecurity.com/2016/08/30/osxkeydnap-spreads-via-signed-transmission-application/
                '''
        }
    }

]
